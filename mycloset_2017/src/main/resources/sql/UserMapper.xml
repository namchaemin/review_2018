<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
 	
	<!-- <resultMap id="user_infoelectMap" type="user">
		<result property="userId" 			column="user_id" 			jdbcType="VARCHAR"/>
		<result property="userName"	column="user_name" 		jdbcType="VARCHAR" />
		<result property="password" 	column="password" 		jdbcType="VARCHAR" />
		<result property="role" 				column="role" 					jdbcType="VARCHAR" />
		<result property="ssn" 				column="ssn" 					jdbcType="VARCHAR" />
		<result property="phone" 			column="cell_phone" 		jdbcType="VARCHAR" />
		<result property="addr" 				column="addr" 					jdbcType="VARCHAR" />
		<result property="email" 			column="email" 				jdbcType="NUMERIC"  />
		<result property="regDate" 		column="reg_date" 			jdbcType="DATE" />
		</resultMap> -->
		
		<resultMap type="user" id="userSelectMap">
		<result property="user_no" column="user_no" jdbcType="NUMERIC" />
		<result property="email" column="email" jdbcType="VARCHAR" />
		<result property="nick" column="nick" jdbcType="VARCHAR" />
		<result property="pwd" column="pwd" jdbcType="VARCHAR" />
		<result property="phot_path" column="phot_path" jdbcType="VARCHAR" />
		</resultMap>
	
	<!-- SQL : INSERT -->
	<!-- <insert 	id="addUser"		parameterType="user" >
	 	INSERT
		INTO user_info( user_id , user_name , password , role , ssn, cell_phone, addr, email , reg_date) 
		VALUES	 (	#{userId} , #{userName} , #{password} , 'user' , #{ssn:VARCHAR} , 
							#{phone:VARCHAR} , #{addr:VARCHAR} , #{email:VARCHAR} , SYSDATE )
	 </insert> -->
	 <insert   id="addUser"        parameterType="user" >
        INSERT
        INTO user_info( user_no , email , nick , pwd , phot_path) 
        VALUES   (  UNO.NEXTVAL , #{email} , #{nick} , #{pwd} , #{phot_path:VARCHAR})
     </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getUser"	parameterType="string"	resultMap="userSelectMap">
		SELECT
		user_no, email, nick , pwd , phot_path  		
		FROM user_info 
		WHERE email = #{value}
	 </select>
	 <select    id="getUser1"  parameterType="INTEGER"   resultMap="userSelectMap">
        SELECT
        user_no, email, nick , pwd , phot_path
        FROM user_info
        WHERE user_no=#{value} 
     </select>
	  <!-- SQL : SELECT ONE -->
     <select    id="getUserByNo"    parameterType="int" resultMap="userSelectMap">
        SELECT
        user_no, email, nick , pwd , phot_path          
        FROM user_info 
        WHERE user_no = #{value}
     </select>
	 
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateUser"	parameterType="user" >
	   	UPDATE user_info
	   	<set>
	   		email	= #{email},
	   		nick	= #{nick:VARCHAR}, 
	   		pwd = #{pwd},
	   		phot_path=#{phot_path:VARCHAR}
	 	</set>
	   	WHERE email = #{email}
	 </update>
	 
	 	 <!-- SQL : FACEBOOK UPDATE -->
	 <update	id="faceupdateUser"	parameterType="user" >
	   	UPDATE user_info
	   	<set>
	   		nick	= #{nick:VARCHAR}, 
	   	</set>
	   	WHERE email = #{email}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT user_id , user_name , email
											FROM user_info
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				user_id like &apos;${searchKeyword}%&apos;
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				user_name like &apos;${searchKeyword}%&apos;
													</if>
												</where>
											</if>
											ORDER BY user_id ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT user_id , user_name , email
						FROM user_info
						<if test="searchCondition != null">
							<where>
								<if test="searchCondition == 0 and searchKeyword !='' ">
						 			user_id like &apos;${searchKeyword}%&apos;
								</if>
								<if test="searchCondition == 1 and searchKeyword !='' ">
						 		user_name like '${searchKeyword}%&apos;
								</if>
							</where>
						</if> ) countTable						
	 </select>
	 
</mapper>